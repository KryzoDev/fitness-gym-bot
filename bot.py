import os
import telebot
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

users = {}

# –í–ø—Ä–∞–≤–∏ –∑–∞ –¥–Ω—è–º–∏
workouts = {
    "monday": {
        "beginner": [
            ("–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑ –≤–∞–≥–æ—é —Ç—ñ–ª–∞", "https://www.youtube.com/watch?v=aclHkVaku9U"),
            ("–ñ–∏–º –Ω–æ–≥–∞–º–∏ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ", "https://www.youtube.com/watch?v=IZxyjW7MPJQ"),
            ("–ì—ñ–ø–µ—Ä–µ–∫—Å—Ç–µ–Ω–∑—ñ—ó", "https://www.youtube.com/watch?v=G5l1f1U5fek"),
            ("–ü—ñ–¥–π–æ–º –Ω–∞ –Ω–æ—Å–∫–∏", "https://www.youtube.com/watch?v=YMmgqO8Jo-k")
        ],
        "experienced": [
            ("–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑—ñ —à—Ç–∞–Ω–≥–æ—é", "https://www.youtube.com/watch?v=ultWZbUMPL8"),
            ("–ñ–∏–º –Ω–æ–≥–∞–º–∏", "https://www.youtube.com/watch?v=IZxyjW7MPJQ"),
            ("–°—Ç–∞–Ω–æ–≤–∞ —Ç—è–≥–∞ –Ω–∞ –ø—Ä—è–º–∏—Ö –Ω–æ–≥–∞—Ö", "https://www.youtube.com/watch?v=RZqoUYbS-7w"),
            ("–í–∏–ø–∞–¥–∏ –∑ –≥–∞–Ω—Ç–µ–ª—è–º–∏", "https://www.youtube.com/watch?v=QF0BQS2W80k")
        ]
    },
    "wednesday": {
        "beginner": [
            ("–ñ–∏–º –Ω–∞ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ", "https://www.youtube.com/watch?v=6JtP6ju0IMw"),
            ("–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –±–ª–æ–∫—É", "https://www.youtube.com/watch?v=CAwf7n6Luuc"),
            ("–ì–∞–Ω—Ç–µ–ª—ñ –ª–µ–∂–∞—á–∏", "https://www.youtube.com/watch?v=VmB1G1K7v94"),
            ("–†–æ–∑–≤–µ–¥–µ–Ω–Ω—è —Ä—É–∫ —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ñ", "https://www.youtube.com/watch?v=eozdVDA78K0")
        ],
        "experienced": [
            ("–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞—á–∏", "https://www.youtube.com/watch?v=rT7DgCr-3pg"),
            ("–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞—Ö–∏–ª—ñ", "https://www.youtube.com/watch?v=vT2GjY_Umpw"),
            ("–ü—É–ª–æ–≤–µ—Ä –∑ –≥–∞–Ω—Ç–µ–ª–ª—é", "https://www.youtube.com/watch?v=2-LAMcpzODU"),
            ("–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –±–ª–æ–∫–∞", "https://www.youtube.com/watch?v=CAwf7n6Luuc")
        ]
    },
    "friday": {
        "beginner": [
            ("–ü—ñ–¥–π–æ–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è—á–∏", "https://www.youtube.com/watch?v=ykJmrZ5v0Oo"),
            ("–†–æ–∑–≥–∏–Ω–∞–Ω–Ω—è —Ä—É–∫ –Ω–∞ –±–ª–æ—Ü—ñ", "https://www.youtube.com/watch?v=vB5OHsJ3EME"),
            ("–ú–æ–ª–æ—Ç–∫–∏ –∑ –≥–∞–Ω—Ç–µ–ª—è–º–∏", "https://www.youtube.com/watch?v=zC3nLlEvin4"),
            ("–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –≤—ñ–¥ –ª–∞–≤–∫–∏", "https://www.youtube.com/watch?v=0326dy_-CzM")
        ],
        "experienced": [
            ("–ü—ñ–¥–π–æ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±—ñ—Ü–µ–ø—Å", "https://www.youtube.com/watch?v=kwG2ipFRgfo"),
            ("–§—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º", "https://www.youtube.com/watch?v=vB5OHsJ3EME"),
            ("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–∏–π –ø—ñ–¥–π–æ–º", "https://www.youtube.com/watch?v=soxrZlIl35U"),
            ("–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –Ω–∞ –±—Ä—É—Å–∞—Ö", "https://www.youtube.com/watch?v=2z8JmcrW-As")
        ]
    }
}

# –ö–Ω–æ–ø–∫–∏
def day_selection_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ü º—è—Ç–Ω–∏—Ü—è")
    return kb

def exercise_options(index):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("üîÅ –Ü–Ω—à–∞ –≤–ø—Ä–∞–≤–∞", callback_data=f"replace_{index}"),
        InlineKeyboardButton("üé• –ü–æ—è—Å–Ω–µ–Ω–Ω—è", callback_data=f"explain_{index}")
    )
    return kb

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    cid = message.chat.id
    users[cid] = {"step": "name"}
    bot.send_message(cid, "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")

@bot.message_handler(func=lambda msg: True)
def handle_all(msg):
    cid = msg.chat.id
    text = msg.text.strip().lower()

    if cid not in users:
        users[cid] = {"step": "name"}

    user = users[cid]

    if user["step"] == "name":
        user["name"] = msg.text.strip()
        user["step"] = "experience"
        bot.send_message(cid, f"–†–∞–¥–∏–π –∑–Ω–∞–π–æ–º—Å—Ç–≤—É, {user['name']}! –ú–∞—î—à –¥–æ—Å–≤—ñ–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —É –∑–∞–ª—ñ? (–¢–∞–∫/–ù—ñ)")

    elif user["step"] == "experience":
        user["experienced"] = text == "—Ç–∞–∫"
        user["step"] = "choose_day"
        bot.send_message(cid, "–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", reply_markup=day_selection_keyboard())

    elif user["step"] == "choose_day":
        day_map = {
            "–ø–æ–Ω–µ–¥—ñ–ª–æ–∫": "monday",
            "—Å–µ—Ä–µ–¥–∞": "wednesday",
            "–ø º—è—Ç–Ω–∏—Ü—è": "friday",
            "–ø—è—Ç–Ω–∏—Ü—è": "friday"
        }
        if text in day_map:
            day_key = day_map[text]
            level = "experienced" if user["experienced"] else "beginner"
            user["current_day"] = day_key
            user["current_list"] = workouts[day_key][level][:]
            send_exercises(cid, user)
        else:
            bot.send_message(cid, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏: –ü–æ–Ω–µ–¥—ñ–ª–æ–∫, –°–µ—Ä–µ–¥–∞ –∞–±–æ –ü º—è—Ç–Ω–∏—Ü—è.", reply_markup=day_selection_keyboard())

def send_exercises(cid, user):
    exercises = user["current_list"]
    for i, (name, link) in enumerate(exercises):
        bot.send_message(
            cid,
            f"üí™ {name}\nüîÅ 3 –ø—ñ–¥—Ö–æ–¥–∏ –ø–æ 12 —Ä–∞–∑—ñ–≤",
            reply_markup=exercise_options(i)
        )

@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    cid = call.message.chat.id
    data = call.data
    user = users[cid]

    if data.startswith("replace_"):
        index = int(data.split("_")[1])
        alt = "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –≤–ø—Ä–∞–≤–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –Ω–∞ –æ–¥–Ω—ñ–π –Ω–æ–∑—ñ)"
        bot.edit_message_text(f"üîÅ –ó–∞–º—ñ–Ω–∞: {alt}", cid, call.message.message_id)

    elif data.startswith("explain_"):
        index = int(data.split("_")[1])
        name, link = user["current_list"][index]
        bot.send_message(cid, f"üé• –ü–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ '{name}':\n{link}")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ ‚úÖ")
bot.polling(none_stop=True)
